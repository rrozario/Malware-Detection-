
# coding: utf-8

# ## A Machine Learning approach for Malware Detection

# Importing all the required libraries

# In[1]:

import os
import pandas
import numpy
import pickle
import pefile
import sklearn.ensemble as ek
from sklearn import cross_validation, tree, linear_model
from sklearn.feature_selection import SelectFromModel
from sklearn.externals import joblib
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn import preprocessing
from sklearn import svm
from sklearn.linear_model import LinearRegression


# Loading the initial dataset delimited by | 

# In[2]:

dataset = pandas.read_csv('C:/Users/Ruchi/Desktop/ML Project/data.csv',sep='|', low_memory=False)


# In[3]:

dataset.head()


# In[4]:

dataset.describe()


# Number of malicious files vs Legitimate files in the training set

# In[5]:

dataset.groupby(dataset['legitimate']).size()


# Dropping columns like Name of the file, MD5 (message digest) and label

# In[6]:

X = dataset.drop(['Name','md5','legitimate'],axis=1).values
y = dataset['legitimate'].values


# ##### ExtraTreesClassifier
# ExtraTreesClassifier fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and use averaging to improve the predictive accuracy and control over-fitting

# In[7]:

extratrees = ek.ExtraTreesClassifier().fit(X,y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)
nbfeatures = X_new.shape[1]


# ExtraTreesClassifier helps in selecting the required features useful for classifying a file as either Malicious or Legitimate
# 
# 14 features are identified as required by ExtraTreesClassifier

# In[8]:

nbfeatures


# ######  Cross Validation
# Cross validation is applied to divide the dataset into random train and test subsets.
# test_size = 0.2 represent the proportion of the dataset to include in the test split 

# In[14]:

X_train, X_test, y_train, y_test = cross_validation.train_test_split(X_new, y ,test_size=0.2)


# In[9]:

features = []
index = numpy.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]


# The features identified by ExtraTreesClassifier

# In[10]:

for f in range(nbfeatures):
    print("%d. feature %s (%f)" % (f + 1, dataset.columns[2+index[f]], extratrees.feature_importances_[index[f]]))
    features.append(dataset.columns[2+f])


# Building the below Machine Learning model

# In[12]:

model = { "DecisionTree":tree.DecisionTreeClassifier(max_depth=10),
         "RandomForest":ek.RandomForestClassifier(n_estimators=50),
         "Adaboost":ek.AdaBoostClassifier(n_estimators=50),
         "GradientBoosting":ek.GradientBoostingClassifier(n_estimators=50),
         "GNB":GaussianNB(),
         "LinearRegression":LinearRegression()   
}


# Training each of the model with the X_train and testing with X_test.
# The model with best accuracy will be ranked as winner

# In[25]:

results = {}
for algo in model:
    clf = model[algo]
    clf.fit(X_train,y_train)
    score = clf.score(X_test,y_test)
    print ("%s : %s " %(algo, score))
    results[algo] = score


# In[26]:

winner = max(results, key=results.get)


# Saving the model

# In[27]:

joblib.dump(model[winner],'classifier/classifier.pkl')


# In[28]:

open('classifier/features.pkl', 'wb').write(pickle.dumps(features))


# Calculating the False positive and negative on the dataset

# In[41]:

clf = model[winner]
res = clf.predict(X_new)
mt = confusion_matrix(y, res)
print("False positive rate : %f %%" % ((mt[0][1] / float(sum(mt[0])))*100))
print('False negative rate : %f %%' % ( (mt[1][0] / float(sum(mt[1]))*100)))


# In[36]:

# Load classifier
clf = joblib.load('classifier/classifier.pkl')
#load features
features = pickle.loads(open(os.path.join('classifier/features.pkl'),'rb').read())

